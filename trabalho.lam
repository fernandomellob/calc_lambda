let

    true = \x y. x;
    false = \x y. y;
    
    if = \b e1 e2. b e1 e2;

    not = \b. b false true;
    and = \b1 b2. if b1 b2 false;
    or = \b1 b2. if b1 true b2;

    zero = \f x. x; -- pode-se usar 0 por praticidade
    um = \f x. f x; -- 1
    dois = \f x. f (f x); -- 2

    succ = \n. \A B. A (n A B);

    add = \n1 n2. n1 succ n2;
    add2 = \n1 n2. \A B. n1 A (n2 A B);

    mult = \n1 n2. n1 (\x. add n2 x) 0;
    mult2 = \m n. \p q. m (n p) q;

    isZero = \n. n (\x. false) true;
    isPos = \n. not (isZero n); 

    pair = \a b. \c. c a b;
    fst = \p. p true;
    snd = \p. p false;

    swap = \p. pair (snd p) (fst p);
    shiftInc = \p. pair (snd p) (succ (snd p));
 
    -- (pred n) calcula n-1 se n>0, n se n=0 
    pred = \n. fst (n shiftInc (pair 0 0));

    -- (sub a b) calcula a - b
    sub = \a b. b pred a;

    -- (menor a b) testa a < b
    menor = \a b. isPos (sub b a);
    
    empty = \x. true;
    cons = pair;

    isEmpty = \l. l (\a b. false);
    head = fst;
    tail = snd;

    Y = \f. (\x. f (x x)) (\x. f (x x));

    --

    S_fat = \R. \n. if (isZero n)
                    1
                    (mult n (R (pred n)));

    fat = Y S_fat;

    --COMEÇO DO TRABALHO:

--funcao igual letra a, verifica se \a e \b sao iguais
    igual = \a b. and (isZero(sub a b)) (isZero(sub b a));



--funcao polinomio letra b, calcula a^2 + b*3
    polinomio = \a b. add2 (mult2 a a) (mult2 b 3); 


--funcao multQuatro letra c, verifica se o numero recebido é multiplo de 4 através de recursividade

    S_multQuatro = \R. \n. if (not (menor n 4))
                       (R (sub n 4))
                       (isZero n);

    multQuatro = Y S_multQuatro;



--função da letra d, que inverte a fração do par se o primeiro termo é diferente de 0
    invFrac = \p. if (isZero (fst p)) 
                (p)
                (swap p);



--função da letra e: recebe dois pares e multiplica os componentes correspondentes em um terceiro par que é devolvido

    multFrac = \p1 p2. pair (mult (fst p1) (fst p2)) (mult (snd p1) (snd p2));


--função da letra f: recebe dois pares (a,b) e (c,d) e devolve (ad+bc,bd), somando frações

    somaFrac = \p1 p2. pair (add (mult (fst p1) (snd(p2))) (mult (snd p1) (fst p2))) (mult (snd p1) (snd p2));



--função da letra g, que recebe uma lista e retorna sua soma

    S_somaLista = \R l. if (isEmpty l)
                        0
                        (add (head l) (R (tail l)));

    somaLista= Y S_somaLista;



--funcao fibonnaci letra h, calcula sequencia fibonnaci usando recursividade

    S_Fib = \R. \n. if (isZero n)
                0
                ((if (isZero(sub n 1)))
                    1
                    ((add (R (pred n)) (R (pred(pred n))))));

    Fib = Y S_Fib;





  
in
   somaFrac (pair 1 3) (pair 2 3)
